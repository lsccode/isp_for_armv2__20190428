#
# autogenerated makefile
# please do not edit
#

SYSTEM ?= linux
GCC ?= $(shell which gcc)
GXX ?= $(shell which g++)
GAR ?= $(shell which ar)
GST ?= $(shell which strip)

override VERSION = 2.0.22
override BUILD = build
override LIBNAME = libevent

# cross-platform compiler options for C language
override GCC_FLAGS = -c -MMD -pipe -fdiagnostics-color=always -Wno-unused-function -fno-strict-aliasing -Wall -O2 -DHAVE_CONFIG_H -Icompat -Itarget/build/include -I. -Iinclude -Itarget/build/include

# cross-platform compiler options for C++ language
override GXX_FLAGS = -c -MMD -pipe -fdiagnostics-color=always -Wno-unused-function -fno-strict-aliasing -Wall -O2 -DHAVE_CONFIG_H -Icompat -Itarget/build/include -I. -Iinclude -Itarget/build/include

# cross-platform linker options
override LINKER_FLAGS = -shared
override LINKER_FLAGS += 

# common sources to be compiled for any platform
override GCC_SOURCES = buffer.c bufferevent.c bufferevent_filter.c bufferevent_pair.c bufferevent_ratelim.c bufferevent_sock.c event.c evmap.c evthread.c evutil.c evutil_rand.c http.c listener.c log.c signal.c strlcpy.c
override GXX_SOURCES = 

# taking into account system-based variations:

# for linux
ifeq ($(SYSTEM),linux)
# flags
override GCC_FLAGS += -fPIC
override GXX_FLAGS += -fPIC
override LINKER_FLAGS += -lrt -Wl,-rpath,'$$ORIGIN':'$$ORIGIN'/lib
# sources
override GCC_SOURCES += epoll.c epoll_sub.c evthread_pthread.c poll.c select.c
override GXX_SOURCES += 

# for windows
else ifeq ($(SYSTEM),windows)
# flags
override GCC_FLAGS += 
override GXX_FLAGS += 
override LINKER_FLAGS += -static-libgcc -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic -lws2_32
# sources
override GCC_SOURCES += buffer_iocp.c bufferevent_async.c event_iocp.c evthread_win32.c win32select.c
override GXX_SOURCES += 

# for android
else ifeq ($(SYSTEM),android)
# flags
override GCC_FLAGS += -fPIC
override GXX_FLAGS += -fPIC
override LINKER_FLAGS += -Wl,-rpath,'$$ORIGIN':'$$ORIGIN'/lib
# sources
override GCC_SOURCES += epoll.c epoll_sub.c evthread_pthread.c poll.c select.c
override GXX_SOURCES += 

# fail if system is not provided/supported
else
$(error system $(SYSTEM) is not supported)
endif

# use C compiler flags provided in command line
override GCC_FLAGS += $(CFLAGS)

# use C++ compiler flags provided in command line
override GCC_FLAGS += $(CXXFLAGS)

# use linker flags provided in command line
override LINKER_FLAGS += $(LDFLAGS)

# filter different extensions of C++ files
override CPP_SOURCES = $(filter %.cpp, $(GXX_SOURCES))
override CC_SOURCES = $(filter %.cc, $(GXX_SOURCES))
override CXX_SOURCES = $(filter %.cxx, $(GXX_SOURCES))
override CP_SOURCES = $(filter %.cp, $(GXX_SOURCES))
override CZZ_SOURCES = $(filter %.c++, $(GXX_SOURCES))

# process sources paths
override OBJPREFIX = $(BUILD)/objects
override OBJECTS = $(addprefix $(OBJPREFIX)/,$(GCC_SOURCES:.c=.o))
override OBJECTS += $(addprefix $(OBJPREFIX)/,$(CPP_SOURCES:.cpp=.o))
override OBJECTS += $(addprefix $(OBJPREFIX)/,$(CC_SOURCES:.cc=.o))
override OBJECTS += $(addprefix $(OBJPREFIX)/,$(CXX_SOURCES:.cxx=.o))
override OBJECTS += $(addprefix $(OBJPREFIX)/,$(CP_SOURCES:.cp=.o))
override OBJECTS += $(addprefix $(OBJPREFIX)/,$(CZZ_SOURCES:.c++=.o))

# file names and extensions
override SLIBEXT = a
override STARGET = $(LIBNAME).$(SLIBEXT)
ifeq ($(SYSTEM),windows)
override DLIBEXT = dll
override DTARGET = $(LIBNAME).$(DLIBEXT)
include rc.make
override RCOBJS = $(OBJPREFIX)/resource.o $(OBJPREFIX)/assembly.o
else
override DLIBEXT = so
override DTARGET = $(LIBNAME).$(DLIBEXT).$(VERSION)
override RCOBJS =
endif

override OBJDIRS = $(sort $(dir $(OBJECTS)))

# dependencies:

# for include header flags and copying libraries
override HEADER_DEPENDENCIES = 
-include $(addprefix ../,$(addsuffix /includes.make,$(HEADER_DEPENDENCIES)))

# for linker flags: dynamic libraries
override DYNAMIC_LIBRARIES = 
override DYNLIBDIRS = $(addprefix ../,$(addsuffix /$(BUILD),$(DYNAMIC_LIBRARIES)))
override LINKER_FLAGS += $(addprefix -L, $(DYNLIBDIRS))
override DYNLIBS = $(sort $(wildcard $(addsuffix /*.$(DLIBEXT)*, $(DYNLIBDIRS))))
override LINKER_FLAGS += $(addprefix -l:, $(notdir $(DYNLIBS)))

-include $(addprefix ../,$(addsuffix /includes.make,$(DYNAMIC_LIBRARIES)))

# for linker flags: static libraries
override STATIC_LIBRARIES = 
override STLIBDIRS = $(addprefix ../,$(addsuffix /$(BUILD),$(STATIC_LIBRARIES)))
override LINKER_FLAGS += $(addprefix -L, $(STLIBDIRS))
override STLIBS = $(sort $(wildcard $(addsuffix /*.$(SLIBEXT), $(STLIBDIRS))))
override LINKER_FLAGS += -Wl,-Bstatic
override LINKER_FLAGS += $(addprefix -l:, $(notdir $(STLIBS)))
override LINKER_FLAGS += -Wl,-Bdynamic

-include $(addprefix ../,$(addsuffix /includes.make,$(STATIC_LIBRARIES)))

# recipes:

all: $(BUILD)/$(DTARGET) $(BUILD)/$(STARGET)
	@$(GST) --strip-debug $(BUILD)/$(DTARGET)

$(BUILD)/$(DTARGET): $(OBJECTS) $(RCOBJS)
	$(GXX) $^ $(LINKER_FLAGS) -o $@

$(BUILD)/$(STARGET): $(OBJECTS)
	$(GAR) -rscD $@ $^

$(BUILD):
	@mkdir -p $(OBJDIRS) $(HDRDIRS)

$(OBJPREFIX)/%.o: %.c | $(BUILD)
	$(GCC) $(GCC_FLAGS) $< -o $@

$(OBJPREFIX)/%.o: %.cpp | $(BUILD)
	$(GXX) $(GXX_FLAGS) $< -o $@

$(OBJPREFIX)/%.o: %.cc | $(BUILD)
	$(GXX) $(GXX_FLAGS) $< -o $@

$(OBJPREFIX)/%.o: %.cxx | $(BUILD)
	$(GXX) $(GXX_FLAGS) $< -o $@

$(OBJPREFIX)/%.o: %.cp | $(BUILD)
	$(GXX) $(GXX_FLAGS) $< -o $@

$(OBJPREFIX)/%.o: %.c++ | $(BUILD)
	$(GXX) $(GXX_FLAGS) $< -o $@

$(OBJPREFIX)/resource.o: $(OBJPREFIX)/resource.rc
	$(WINDRES) -i $< -o $@

$(OBJPREFIX)/resource.rc: src/main/resources/os2/resource.rc | $(BUILD)
	cp -f $< $@

$(OBJPREFIX)/assembly.o: $(OBJPREFIX)/assembly.rc $(OBJPREFIX)/assembly-x86.manifest $(OBJPREFIX)/assembly-ia64.manifest
	$(WINDRES) -i $< -o $@

$(OBJPREFIX)/assembly.rc: src/main/resources/os2/assembly.rc | $(BUILD)
	cp -f $< $@

$(OBJPREFIX)/assembly-x86.manifest: src/main/resources/os2/assembly-x86.manifest | $(BUILD)
	cp -f $< $@

$(OBJPREFIX)/assembly-ia64.manifest: src/main/resources/os2/assembly-ia64.manifest | $(BUILD)
	cp -f $< $@

$(SOURCES): makefile
	@touch $@

.PHONY: clean all

clean:
	rm -rf $(BUILD)

